priority -50

global !p

texMathZones = ['texMathZone'+x for x in
    ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

HatSequence = r"\overline \bar \hat \tilde \widetilde \widehat".split()

LeftArrows = r"\leftarrow|\longleftarrow|\Leftarrow|\Longleftarrow".split("|")

RightArrows = r"\rightarrow|\longrightarrow|\Rightarrow|\Longrightarrow".split("|")

LeftrightArrows = ["\\" + x for x in "leftrightarrow|longleftrightarrow|Leftrightarrow|Longleftrightarrow|iff".split("|")]

import re
def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    currentlinenumber = int(vim.eval("line('.')"))
    currentcolnumber = int(vim.eval("col('.')"))
    if (vim.eval('&filetype') in {'vimwiki', 'markdown'}) \
		and '$' in vim.eval("getline(%d)"%currentlinenumber)[:currentcolnumber] \
		and "$" in vim.eval("getline(%d)"%currentlinenumber)[currentcolnumber-1:]:

        return True
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False

def environment(default_envname = None, lastemptyline = False):
    currentlinenumber = int(vim.eval("line('.')"))
    if lastemptyline and vim.eval("getline(%d)" % currentlinenumber).strip() != "":
        return ""
    for index in range(currentlinenumber - 1, 0, -1):
        if vim.eval("getline(%d)" % index).endswith("\\\\"):
            continue
        else:
            ob = re.fullmatch(r".*\\begin{(\w+\*?)}({\w+})?(\[\w+\])?", vim.eval("getline(%d)" % index))
            if ob:
                env_name = ob.group(1)
                break
            else:
                return ""
    else:
        return ""
    for index in range(currentlinenumber + 1, (int(vim.eval("line('$')")) if not lastemptyline else (currentlinenumber + 1)) + 1):
        if vim.eval("getline(%d)" % index).endswith("\\\\"):
            continue
        ob = re.fullmatch(r".*\\end{(\w+\*?)}", vim.eval("getline(%d)" % index))
        if ob:
            if env_name == ob.group(1):
                if default_envname is None:
                    return env_name
                else:
                    return env_name == default_envname
            else:
                return ""
        else:
            return ""
    else:
        return ""

def extract_operator(line):
    line = line.strip()
    if line[0] in ["=", "<", ">"]:
        return line[0]
    elif line[0] != "\\":
        return ""
    else:
        if not line[1].isalpha():
            return ""
        rv = "\\" + re.fullmatch("([a-zA-Z]+)([^a-zA-Z].*)", line[1:]).group(1)
        remain = re.fullmatch("([a-zA-Z]+)([^a-zA-Z].*)", line[1:]).group(2)
        if remain and remain[0] == "{":
            index = 0
            depth = 0
            while index < len(remain):
                if remain[index] == "{":
                    depth += 1
                    index += 1
                    continue
                elif remain[index] == "}":
                    depth -= 1
                    index += 1
                    if depth == 0:
                        rv += remain[:index]
                        break
                    continue
                elif remain[index] == "\\":
                    index += 2
                    continue
                else:
                    index += 1
                    continue
        return rv

def findfirstoperator(line):
    index = 0
    depth = 0
    while index < len(line):
        if line[index] == '\s':
            index += 1
            continue
        elif line[index] in ['{', '(']:
            depth += 1
            index += 1
            continue
        elif line[index] in ['}', ')']:
            depth -= 1
            index += 1
            continue
        elif depth <= 0 and line[index] == '=':
            return index
        elif depth <= 0 and all(line[index:].startswith(x) for x in ["\\le", "\\ge", ">", "<", "\\succ", "\\prec", "\\sim", "\\ne", "\\not"]):
            return index
        else:
            index += 1
            continue
    else:
        return len(line) - len(line.lstrip())

def findmatched_parentheses(line, lindex):
    depth = 0
    matched = {"(":")", ")":"(", "[":"]", "]":"[", "{":"}", "}":"{"}
    c = line[lindex]
    d = matched[c]
    if line[lindex] in ["(", "[", "{"]:
        for index in range(lindex, len(line)):
            if line[index] == c:
                depth += 1
            elif line[index] == d:
                depth -= 1
            if depth == 0:
                return index
    elif line[lindex] in [")", "]", "}"]:
        for index in range(lindex, -1, -1):
            if line[index] == c:
                depth += 1
            elif line[index] == d:
                depth -= 1
            if depth == 0:
                return index
    return -1

def add_placeholder(snip):
    info = snip.buffer[snip.line]
    snip.buffer[snip.line] = ''
    # print(info)
    snip.expand_anon(info)

def add_package(packagename):
    if packagename == "pgfplots" and vim.eval("search('\\\\usepackage{pgfplots}', 'n')") == '0':
        try:
            first = int(vim.eval("search('\\\\usepackage', 'n')"))
            if first == 0:
                first = int(vim.eval("search('\\documentclass', 'n')"))
            else:
                first -= 1
        except:
            first = 0
        snip.buffer[first:first] = ['\\pgfplotsset{compat=1.16}']
        snip.buffer[first:first] = ['\\usepackage{pgfplots}']
def generate_matrix(prefix, snip):
	info = snip.buffer[snip.line]
	spacelen = len(info) - len(info.lstrip())
	linfo = info[:snip.snippet_start[1]]
	rinfo = info[snip.snippet_end[1]:]
	info = info[snip.snippet_start[1]:snip.snippet_end[1]]
	# print([linfo, rinfo, info])
	if len(info) > 1 and info[1].isnumeric():
		real_shape = info[:2]
		virtual_shape = info[2:]
	else:
		real_shape = info[0]
		virtual_shape = info[1:]
	if len(real_shape) == 1:
		row_amount = int(real_shape)
		column_amount = int(real_shape)
	else:
		row_amount = int(real_shape[0])
		column_amount = int(real_shape[1])
	if len(virtual_shape) == 0:
		virtual_row_amount = "0"
		virtual_column_amount = "0"
	elif len(virtual_shape) == 1:
		virtual_row_amount = virtual_shape[0]
		virtual_column_amount = virtual_shape[0]
	else:
		virtual_row_amount = virtual_shape[0]
		virtual_column_amount = virtual_shape[1]
	snip.buffer[snip.line] = ''
	displayed = re.sub(r"\\", r"\\\\", linfo) + "\\begin{%cmatrix}\n" % prefix
	def generate_code(i, j, row, column, virtual_row, virtual_column):
		if i == 1 and j == 1:
			return ""
		else:
			code = """`!p
def generate_matrix_element(i, j, row, column, virtual_row, virtual_column, ht, vt):
    vdot = False
    hdot = False
    leftp = "{"
    rightp = "}"
    if i > 1 and ht[j].strip() == r"\\cdots":
        vdot = True
    if j > 1 and vt[i].strip() == r"\\vdots":
        hdot = True
    if vdot and hdot:
        return r"\\ddots"
    elif vdot:
        return r"\\cdots"
    elif hdot:
        return r"\\vdots"
    elif i > 1 or j > 1:
        if virtual_row == "0":
            if i > 1 and j > 1:
                value = ""
                if re.sub("\d", "*", ht[1]) == re.sub("\d", "*", ht[2]) == re.sub("\d", "*", vt[2]):
                    for index in range(len(ht[1])):
                        if not ht[1][index].isnumeric():
                            value += ht[1][index]
                        else:
                            x1 = int(ht[1][index])
                            x2 = int(ht[2][index])
                            x3 = int(vt[2][index])
                            value += str((x2 - x1) * (j-1) + (x3 - x1) * (i-1) + x1)
                    return value
                elif re.match(".*[a-zA-Z]_\{11\}", ht[1]):
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", ht[1])
                else:
                    return ""
            elif i > 2:
                value = ""
                if re.sub("\d", "*", ht[1]) == re.sub("\d", "*", vt[2]):
                    for index in range(len(ht[1])):
                        if not ht[1][index].isnumeric():
                            value += ht[1][index]
                        else:
                            x1 = int(ht[1][index])
                            x3 = int(vt[2][index])
                            value += str((x3 - x1) * (i - 1) + x1)
                    return value
                elif re.match(".*[a-zA-Z]_\{11\}", ht[1]):
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", ht[1])
                else:
                    return ""
            elif j > 2:
                value = ""
                if re.sub("\d", "*", ht[1]) == re.sub("\d", "*", ht[2]):
                    for index in range(len(ht[1])):
                        if not ht[1][index].isnumeric():
                            value += ht[1][index]
                        else:
                            x1 = int(ht[1][index])
                            x2 = int(ht[2][index])
                            value += str((x2 - x1) * (j-1) + x1)
                    return value
                elif re.match(".*[a-zA-Z]_\{11\}", ht[1]):
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", ht[1])
                else:
                    return ""
            elif re.match(".*[a-zA-Z]_\{11\}", ht[1]):
                return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", ht[1])
            else:
                return ht[1]
        else:
            vdot = False
            hdot = False
            if any([x.strip() == r"\\vdots" for x in vt[:-1]]):
                hdot = True
            if any([x.strip() == r"\\cdots" for x in ht[:-1]]):
                vdot = True
            flag = False
            biasandvirtualbias = False
            if i > 1 and j > 1:
                value = ""
                underline = False
                if re.sub("\d", "*", ht[1]) == re.sub("\d", "*", ht[2]) == re.sub("\d", "*", vt[2]):
                    for index in range(len(ht[1])):
                        if not ht[1][index].isnumeric():
                            value += ht[1][index]
                            biasandvirtualbias = False
                            if ht[1][index] == "_":
                                underline = True
                            else:
                                underline = False
                        else:
                            x1 = int(ht[1][index])
                            x2 = int(ht[2][index])
                            x3 = int(vt[2][index])
                            virtual_bias = ""
                            bias = x1
                            if underline and ht[1][index-1] == "_":
                                value += leftp
                            if not vdot:
                                bias += (x2 - x1) * (j - 1)
                            else:
                                bias += -(column - j) * (x2 - x1) - (x2 - x1)
                                if x2 != x1:
                                    if x2 == x1 + 1:
                                        virtual_bias += virtual_column
                                    elif x1 == x2 + 1:
                                        virtual_bias += "-" + virtual_column
                                    else:
                                        virtual_bias += str(x2 - x1) + virtual_column
                            if not hdot:
                                bias += (x3 - x1) * (i - 1)
                            else:
                                bias += -(row - i) * (x3 - x1) - (x3 - x1)
                                if x3 != x1:
                                    if x3 == x1 + 1:
                                        virtual_bias += ("+" if virtual_bias else "") + virtual_row
                                    elif x1 == x3 + 1:
                                        virtual_bias += "-" + virtual_row
                                    else:
                                        virtual_bias += ("+" if virtual_bias and x3 > x1 else "") + str(x3 - x1) + virtual_row
                            if index > 0 and ht[1][index-1].isnumeric() and (biasandvirtualbias or (bias and virtual_bias)):
                                value += ","
                            biasandvirtualbias = bias and virtual_bias
                            if bias == 0:
                                value += virtual_bias
                            else:
                                value += virtual_bias + ("+" if virtual_bias and bias > 0 else "") + str(bias)
                            if underline and (index == len(ht[1])-1 or not ht[1][index+1].isnumeric()):
                                value += rightp
                    return value
                    flag = True
            elif i > 2:
                value = ""
                underline = False
                if re.sub("\d", "*", ht[1]) == re.sub("\d", "*", vt[2]):
                    for index in range(len(ht[1])):
                        if not ht[1][index].isnumeric():
                            biasandvirtualbias = False
                            value += ht[1][index]
                            if ht[1][index] == "_":
                                underline = True
                            else:
                                underline = False
                        else:
                            x1 = int(ht[1][index])
                            x3 = int(vt[2][index])
                            virtual_bias = ""
                            bias = x1
                            if underline and ht[1][index-1] == "_":
                                value += leftp
                            if not hdot:
                                bias += (x3 - x1) * (i - 1)
                            else:
                                bias += -(row - i) * (x3 - x1) - (x3 - x1)
                                if x3 != x1:
                                    if x3 == x1 + 1:
                                        virtual_bias += ("+" if virtual_bias else "") + virtual_row
                                    elif x1 == x3 + 1:
                                        virtual_bias += "-" + virtual_row
                                    else:
                                        virtual_bias += ("+" if virtual_bias and x3 > x1 else "") + str(x3 - x1) + virtual_row
                            if index > 0 and ht[1][index-1].isnumeric() and (biasandvirtualbias or (bias and virtual_bias)):
                                value += ","
                            biasandvirtualbias = bias and virtual_bias
                            if bias == 0:
                                value += virtual_bias
                            else:
                                value += virtual_bias + ("+" if virtual_bias and bias > 0 else "") + str(bias)
                            if underline and (index == len(ht[1])-1 or not ht[1][index+1].isnumeric()):
                                value += rightp
                    return value
                    flag = True
            elif j > 2:
                value = ""
                underline = False
                if re.sub("\d", "*", ht[1]) == re.sub("\d", "*", ht[2]):
                    for index in range(len(ht[1])):
                        if not ht[1][index].isnumeric():
                            biasandvirtualbias = False
                            value += ht[1][index]
                            if ht[1][index] == "_":
                                underline = True
                            else:
                                underline = False
                        else:
                            x1 = int(ht[1][index])
                            x2 = int(ht[2][index])
                            virtual_bias = ""
                            bias = x1
                            if underline and ht[1][index-1] == "_":
                                value += leftp
                            if not vdot:
                                bias += (x2 - x1) * (j - 1)
                            else:
                                bias += -(column - j) * (x2 - x1) - (x2 - x1)
                                if x2 != x1:
                                    if x2 == x1 + 1:
                                        virtual_bias += virtual_column
                                    elif x1 == x2 + 1:
                                        virtual_bias += "-" + virtual_column
                                    else:
                                        virtual_bias += str(x2 - x1) + virtual_column
                            if index > 0 and ht[1][index-1].isnumeric() and (biasandvirtualbias or (bias and virtual_bias)):
                                value += ","
                            biasandvirtualbias = bias and virtual_bias
                            if bias == 0:
                                value += virtual_bias
                            else:
                                value += virtual_bias + ("+" if virtual_bias and bias > 0 else "") + str(bias)
                            if underline and (index == len(ht[1])-1 or not ht[1][index+1].isnumeric()):
                                value += rightp
                    return value
                    flag = True
            if not flag and re.match(".*[a-zA-Z]_\{11\}", ht[1]):
                if not vdot and not hdot:
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", ht[1])
                elif vdot and hdot:
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + virtual_row + ("-" + str(row - i) if i != row else "") + "," + virtual_column + ("-" + str(column - j) if j != column else "") + "}", ht[1])
                elif vdot:
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + "," + virtual_column + ("-" + str(column - j) if j != column else "") + "}", ht[1])
                else:
                    return re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + virtual_row + ("-" + str(row - i) if i != row else "") + "," + str(j) + "}", ht[1])
                flag = True
            elif not flag and (i == 1 or j == 1):
                return ht[1]
                flag = True
            if not flag:
                return ""
    else:
        return ""
snip.rv = generate_matrix_element(%d, %d, %d, %d, '%c', '%c', [%s], [%s])
`""" % (i, j, row, column, virtual_row, virtual_column, "''," + ",".join("t[%d]" % x for x in range(1, j+1)), "''," + ",".join("t[%d]" % (1 + column * (x-1)) for x in range(1, i+1)))
		return code
	if row_amount > 0 and column_amount > 0:
		displayed += " " * (4 + len(linfo)) + "$1\t" + ("& " if column_amount > 1 else "\\" * 4)
		index = 2
		for i in range(2, column_amount + 1):
			displayed += "${" + "{}".format(index) + ":" + generate_code(1, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "}\t" + ("& " if i < column_amount else "\\" * 4)
			index += 1
		displayed += "\n"
		for j in range(2, row_amount + 1):
			displayed += " " * (4 + len(linfo))
			for i in range(1, column_amount + 1):
				displayed += "${" + "{}".format(index) + ":" + generate_code(j, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "}\t" + ("& " if i < column_amount else "\\" * 4)
				index += 1
			displayed += "\n"
	displayed += " " * len(linfo) + "\\end{%cmatrix}$0" % prefix + (" " + re.sub(r"\\", r"\\\\", rinfo) if rinfo else "")
	snip.expand_anon(displayed)
endglobal
##############
# MATH STUFF #
##############
snippet eq "Equation" b
\begin{equation}
    $0
\end{equation}
endsnippet

snippet eqnn "Equation without number" b
\begin{equation*}
    $0
\end{equation*}
endsnippet

snippet eqa "Equation array" b
\begin{eqnarray}
    $1 & $2 & $0
\end{eqnarray}
endsnippet

snippet eqann "Equation array without numbers" b
\begin{eqnarray*}
    $1 & $2 & $0
\end{eqnarray*}
endsnippet

post_jump "generate_matrix('p', snip)"
snippet "pmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "pmat" irw
`!p
if not snip.c:
	snip.rv = match.group(1)
`
endsnippet

snippet bmat "bmat" w
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

post_jump "generate_matrix('b', snip)"
snippet "bmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "bmat" irw
`!p
if not snip.c:
	snip.rv = match.group(1)
`
endsnippet

context "math()"
snippet frac. "Fraction" wA
\frac{${1:${VISUAL:nom}}}{${2:denom}}
endsnippet

snippet frac "Fraction" w
\frac{${1:${VISUAL:nom}}}{${2:denom}}
endsnippet

snippet mat "Smart Matrix"
\begin{${1:p/b/v/V/B/small}matrix}
    $0
\end{$1matrix}
endsnippet


context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet lr( "left( right)" w
\left( ${1:${VISUAL}} \right)
endsnippet

snippet lr| "left| right|" w
\left| ${1:${VISUAL}} \right|
endsnippet

snippet lr{ "left\{ right\}" w
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

snippet lr[ "left[ right]" w
\left[ ${1:${VISUAL}} \right]
endsnippet

context "math()"
snippet ",([aAbBcCdDeEgGkKlLmMnNoOpPrRsStTxX])" "Greek alphabet" wrA
`!p
alphabet_map = {
    "a": "alpha",
    "A": "Alpha",
    "b": "beta",
    "B": "Beta",
    "c": "chi",
    "C": "Chi",
    "d": "delta",
    "D": "Delta",
    "e": "epsilon",
    "E": "Epsilon",
    "g": "gamma",
    "G": "Gamma",
    "k": "kappa",
    "K": "Kappa",
    "l": "lambda",
    "L": "Lambda",
    "m": "mu",
    "M": "Mu",
    "n": "nu",
    "N": "Nu",
    "o": "omega",
    "O": "Omega",
    "p": "phi",
    "P": "Phi",
    "r": "rho",
    "R": "Rho",
    "s": "sigma",
    "S": "Sigma",
    "t": "theta",
    "T": "Theta",
    "x": "xi",
    "X": "Xi",
}
snip.rv = "\\"+alphabet_map[match.group(1)]
`
endsnippet

snippet "([vco]?)dot(s?)\." "dot" wrA
`!p snip.rv = "\\"+match.group(1)+"dot"+match.group(2)`
endsnippet

snippet mi "math inline" w
$ ${1}$${0}
endsnippet

snippet mo "math another line" w
$$ ${1}$$${0}
endsnippet
